rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar si el usuario está autenticado
    function isAuth() {
      return request.auth != null;
    }
    
    // Función para verificar si el usuario es administrador
    function isAdmin() {
      return isAuth() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Función para verificar si el usuario está bloqueado
    function isBlocked() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isBlocked == true;
    }
    
    // Reglas para la colección users
    match /users/{userId} {
      allow read: if isAuth() && (request.auth.uid == userId || isAdmin());
      allow create: if isAuth() && (
        request.auth.uid == userId || 
        isAdmin() ||
        (request.auth.email == 'josedavidlobo4@gmail.com')
      );
      allow update: if isAuth() && (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Reglas para la colección pending_users
    match /pending_users/{userId} {
      allow read, write: if isAdmin() || request.auth.email == 'josedavidlobo4@gmail.com';
    }
    
    // Reglas para la colección services
    match /services/{serviceId} {
      allow read: if isAuth() && (!exists(/databases/$(database)/documents/users/$(request.auth.uid)) || !isBlocked());
      allow create: if isAuth();
      allow update: if isAuth() && (
        (resource.data.assignedTechnicianId == request.auth.uid) ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Reglas para la colección notifications
    match /notifications/{notificationId} {
      // Los usuarios pueden leer sus propias notificaciones si no están bloqueados
      allow read: if isAuth() && 
        resource.data.userId == request.auth.uid && 
        !isBlocked();
      
      // Permitir crear notificaciones desde el servicio o admin
      allow create: if isAuth() && (
        // El admin puede crear notificaciones
        isAdmin() ||
        // El servicio puede crear notificaciones para el usuario correcto
        (request.resource.data.userId == request.auth.uid)
      );
      
      // Los usuarios pueden actualizar sus propias notificaciones (marcar como leída)
      allow update: if isAuth() && 
        resource.data.userId == request.auth.uid && 
        !isBlocked() &&
        // Solo permitir actualizar el campo isRead
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      // Los usuarios pueden eliminar sus propias notificaciones
      allow delete: if isAuth() && 
        (resource.data.userId == request.auth.uid || isAdmin()) &&
        !isBlocked();
    }
  }
}
